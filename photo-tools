#!/usr/bin/env bash -e

#
# Photo Tools
#
# USAGE
#
#     photo-tools --types FOLDER                     # list filetypes
#     photo-tools --normalize FOLDER                 # slugify filenames, set propper file permissions
#     photo-tools --group FOLDER                     # group images into 'photos' and movies into 'movies' folder
#     photo-tools --aec FOLDER                       # find images with an absolute error count, i.e. number of different pixels, of zero
#     photo-tools --exif FOLDER                      # list images with missing exif-date
#     photo-tools --duplicates FOLDER...             # find duplicates in backup drive
#     photo-tools --distribute FOLDER                # distribute images into 'year/month' folders
#

show_help() {
  awk '/^[^ #]/{c=1}c==0{print $0}' $0 | sed -n '/^#/p' | sed 1d | sed 's/^#/ /g' \
    | perl -pe "s/ #(.*)$/$(tput setaf 0)\1$(tput sgr 0)/" \
    | perl -pe "s/(USAGE|EXAMPLES|COMMANDS)/$(tput setaf 0)\1$(tput sgr 0)/" \
    | perl -pe "s/\`(.+)\`/$(tput sgr 0 1)\1$(tput sgr 0)/"
  exit 1
}

filetypes() {
  [ ! -d "$1" ] && show_help
  while read -r file
  do
    echo "${file##*.}"
  done < <(fd . -t f "$1") \
  | sort \
  | uniq -c
}

normalize() {
  [ ! -d "$1" ] && show_help
  fd . -e heic "$1" -x magick {} {.}.jpg
  fd . -e heic "$1" -X rm
  fd . -e jpeg "$1" -x mv {} {.}.jpg
  while read -r file
  do
    chmod 644 "$file"
    #xattr -d com.apple.quarantine "$file" 2>/dev/null
    (cd "$(dirname "$file")" && mv "${file##*/}" "$(echo ${file##*/} | tr -s ' ' '-' | tr 'A-Z' 'a-z')")
  done < <(fd . -t f "$1")
}

group() {
  [ ! -d "$1" ] && show_help
  mkdir -p photos
  fd . -e jpg -e jpeg -e png -e gif -e heic "$1" -x mv {} photos/
  mkdir -p movies
  fd . -e mov -e mp4 "$1" -x mv {} movies/
  [ $(fd . -t f "$1" | wc -l | tr -s ' ') -eq 0 ] && rm -r "$1"
}

aec() {
  [ ! -d "$1" ] && show_help
  echo -e "\n $(tput setaf 4)Images with an absolute error count of 0 (number of different pixels):$(tput sgr 0)\n"
  declare -a files
  while read -r file
  do
    files=("${files[@]}" "$file")
  done < <(fd . -t f "$1")
  N=${#files[@]}
  TOTAL=$((N * (N - 1) / 2))
  {
    for ((i=0; i<N; i++)); do
      for ((j=i+1; j<N; j++)); do
        file1=${files[$i]}
        file2=${files[$j]}
        ae=$(magick compare -metric ae ${file1} ${file2} null: 2>&1)
        echo "$(printf "%.f" $ae) ${file1} ${file2}"
      done
    done
  } | tqdm --total $TOTAL --ncols 120 | sed -n /^0/p
}

missing_exif_date() {
  [ ! -d "$1" ] && show_help
  echo -e "\n $(tput setaf 4)Images with missing EXIF date:$(tput sgr 0)\n"
  while read -r file
  do
    exiftool "$file" | grep -q "Create Date" || echo $file
  done < <(fd . -t f "$1")
}

duplicates() {
  dup_folder="${1%/}_duplicates"
  [ ! -d "$1" -o ! -d "$2" ] && show_help
  while read -r file
  do
    mkdir -p "$dup_folder"
    echo -e " move $(tput setaf 0)${file}$(tput sgr 0) into $(tput setaf 0)${dup_folder}$(tput sgr 0)"
    mv "$file" "$dup_folder"
  done < <(while read -r dup; do echo "$dup" | awk -v pattern="^${1}" '$0 ~ pattern'; done < <(fdupes -r "$@"))
}

distribute() {
  [ ! -d "$1" ] && show_help
  N=$(fd . -t f "$1" | wc -l)
  C=0
  while read -r file
  do
    date=$(exiftool "$file" | grep "Create Date" | head -n 1 | awk '{print $4}' | tr ':' '-')
    if [ -n "$date" ]; then
      year=$(echo "$date" | cut -c 1-4)
      filename=$(basename "$file")
      C=$((C+1))
      mkdir -p "$year/$date"
      echo "$(tput setaf 2)[$C/${N// /}]$(tput sgr 0) $year/$date/$filename"
      mv "$file" "$year/$date/$filename"
    fi
  done < <(fd . -t f "$1")
}

[[ -z "$1" ]] && show_help

while [ $# -gt 0 ]; do
  case $1 in
    --types)
      shift
      filetypes "$1"
      ;;
    --distribute)
      shift
      distribute "$1"
      ;;
    --normalize)
      shift
      normalize "$1"
      ;;
    --aec)
      shift
      aec "$1"
      ;;
    --exif)
      shift
      missing_exif_date "$1"
      ;;
    --duplicates)
      shift
      folder1="$1"
      shift
      folder2="$1"
      duplicates "$folder1" "$folder2"
      ;;
    --group)
      shift
      group "$1"
      ;;
    -h|--help)
      show_help
      ;;
    *)
      ;;
  esac
  shift
done

exit 0
